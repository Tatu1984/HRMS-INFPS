generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  role          Role      @default(EMPLOYEE)
  employeeId    String?   @unique
  employee      Employee? @relation(fields: [employeeId], references: [id])
  permissions   Json?     // Granular section-level permissions
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Employee {
  id                String      @id @default(cuid())
  employeeId        String      @unique
  name              String
  email             String      @unique
  phone             String
  altPhone          String?
  address           String
  designation       String
  salary            Float       // Total CTC or Basic + Variable
  basicSalary       Float?      // Basic salary component
  variablePay       Float?      // Variable/incentive component
  department        String
  employeeType      String?     // Sales, Operations, etc.
  salesTarget       Float?      // Monthly sales target (for sales dept)
  reportingHeadId   String?
  reportingHead     Employee?   @relation("ReportingStructure", fields: [reportingHeadId], references: [id])
  subordinates      Employee[]  @relation("ReportingStructure")
  dateOfJoining     DateTime
  profilePicture    String?
  documents         Json?
  // KYC Documents
  aadharNumber      String?
  panNumber         String?
  aadharDocument    String?    // File path or URL for Aadhar document
  panDocument       String?    // File path or URL for PAN document
  // Bank Details
  bankName          String?
  bankAddress       String?
  accountNumber     String?
  ifscCode          String?
  user              User?
  attendance        Attendance[]
  leaves            Leave[]
  tasks             Task[]
  projects          ProjectMember[]
  messages          Message[]
  payroll           Payroll[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Attendance {
  id             String    @id @default(cuid())
  employeeId     String
  employee       Employee  @relation(fields: [employeeId], references: [id])
  date           DateTime
  punchIn        DateTime?
  punchOut       DateTime?
  breakStart     DateTime?
  breakEnd       DateTime?
  totalHours     Float?
  breakDuration  Float?    // Total break time in hours
  idleTime       Float?    // Idle time in hours (logged in but inactive)
  status         AttendanceStatus @default(ABSENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([employeeId, date], name: "employeeId_date")
}

model Leave {
  id           String      @id @default(cuid())
  employeeId   String
  employee     Employee    @relation(fields: [employeeId], references: [id])
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  days         Int
  reason       String
  status       LeaveStatus @default(PENDING)
  adminComment String?     // Admin comment when approving/rejecting/holding
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Project {
  id              String          @id @default(cuid())
  projectId       String          @unique // Auto-generated project ID
  name            String
  description     String
  sowDocument     String?         // Path/URL to signed SoW document
  projectType     ProjectType     @default(MILESTONE)
  totalBudget     Float?
  upfrontPayment  Float?          @default(0)
  currency        String          @default("USD")
  startDate       DateTime
  endDate         DateTime?
  status          ProjectStatus   @default(ACTIVE)
  milestones      Json?           // Array of milestone details with success criteria and payment
  successCriteria String?
  leadId          String?         // Reference to Lead if converted from sales
  saleId          String?         // Reference to Sale if created from sale
  members         ProjectMember[]
  tasks           Task[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ProjectMember {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  role        String?
  createdAt   DateTime  @default(now())
}

model Task {
  id            String        @id @default(cuid())
  projectId     String?
  project       Project?      @relation(fields: [projectId], references: [id])
  milestone     String?       // Which milestone this task belongs to (milestone ID)
  assignedTo    String
  employee      Employee      @relation(fields: [assignedTo], references: [id])
  title         String
  description   String
  status        TaskStatus    @default(PENDING)
  priority      Priority      @default(MEDIUM)
  dueDate       DateTime?
  updates       TaskUpdate[]  // Developer updates/issues/requirements
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model TaskUpdate {
  id          String    @id @default(cuid())
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  content     String    // Update content, issues, requirements
  createdBy   String    // Employee ID
  createdAt   DateTime  @default(now())
}

model Payroll {
  id                String        @id @default(cuid())
  employeeId        String
  employee          Employee      @relation(fields: [employeeId], references: [id])
  month             Int
  year              Int
  workingDays       Int           @default(30)
  daysPresent       Int           @default(0)
  daysAbsent        Int           @default(0)

  // Salary Components
  basicSalary       Float         // Basic pay component
  variablePay       Float         @default(0) // Variable/incentive component

  // Sales/Target (for sales department)
  salesTarget       Float?        // Monthly sales target
  targetAchieved    Float?        @default(0) // Actual target achieved

  // Payable Amounts
  basicPayable      Float         // Calculated based on attendance
  variablePayable   Float         @default(0) // Calculated based on target achievement
  grossSalary       Float         // Total payable before deductions

  // Deductions
  professionalTax   Float         @default(200) // P.tax
  tds               Float         @default(0) // Tax Deducted at Source
  penalties         Float         @default(0) // Any penalties
  advancePayment    Float         @default(0) // Advance taken
  otherDeductions   Float         @default(0) // Other deductions
  totalDeductions   Float         @default(0) // Sum of all deductions

  // Final Amount
  netSalary         Float         // Final amount after deductions

  status            PayrollStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([employeeId, month, year])
}

model SalaryConfig {
  id              String    @id @default(cuid())
  pfPercentage    Float     @default(12)
  esiPercentage   Float     @default(0.75)
  taxSlabs        Json?
  bonusRules      Json?
  updatedAt       DateTime  @updatedAt
}

model Invoice {
  id              String          @id @default(cuid())
  invoiceNumber   String          @unique
  clientName      String
  clientEmail     String?
  amount          Float
  currency        String          @default("INR")
  status          InvoiceStatus   @default(DRAFT)
  items           Json?
  dueDate         DateTime?
  notes           String?
  skyDoSynced     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  id              String          @id @default(cuid())
  type            AccountType
  categoryId      String
  category        AccountCategory @relation(fields: [categoryId], references: [id])
  amount          Float           // Always in INR
  currency        String          @default("INR")
  date            DateTime
  description     String
  reference       String?
  // For incoming payments
  paymentPurpose  String?
  paymentMode     String?         // Bank Transfer, Cash, Cheque, etc
  senderName      String?
  bankInfo        String?
  // For outgoing payments
  paymentTo       String?         // Recipient name
  paymentCategory String?         // Salary, Office Expense, etc
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model AccountCategory {
  id            String      @id @default(cuid())
  name          String      @unique
  type          AccountType
  subCategories Json?
  accounts      Account[]
  createdAt     DateTime    @default(now())
}

model Message {
  id          String      @id @default(cuid())
  senderId    String
  sender      Employee    @relation(fields: [senderId], references: [id])
  recipientId String
  subject     String?
  content     String
  read        Boolean     @default(false)
  tracked     Boolean     @default(true)
  createdAt   DateTime    @default(now())
}

model SalesTarget {
  id              String    @id @default(cuid())
  employeeId      String    // Sales agent/executive
  month           Int       // 1-12
  year            Int
  targetAmount    Float     // Target in USD
  achievedAmount  Float     @default(0) // Achieved in USD
  commission      Float     @default(0) // Commission earned
  numberOfSales   Int       @default(0) // Number of sales made
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([employeeId, month, year])
}

model Report {
  id          String      @id @default(cuid())
  reportType  ReportType
  month       Int?        // For monthly reports
  year        Int?
  data        Json        // Report data in JSON format
  generatedBy String?     // Employee ID who generated
  createdAt   DateTime    @default(now())
}

model Lead {
  id                  String          @id @default(cuid())
  leadNumber          String          @unique
  companyName         String
  companyAddress      String?
  contactName         String
  email               String
  phone               String
  altPhone            String?
  projectType         String?         // Services pitched for
  estimatedValue      Float?          // Estimated deal value in USD
  source              String?         // Website, Referral, Cold Call, etc
  executiveName       String?         // Sales executive or agent name
  communicationDetails String?        // Details of communication
  status              CRMLeadStatus   @default(NEW)
  callbackDateTime    DateTime?       // Call back or connect back date and time
  assignedTo          String?
  notes               String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  convertedAt         DateTime?
  saleId              String?         @unique
  sale                Sale?           @relation(fields: [saleId], references: [id])
}

model Sale {
  id              String      @id @default(cuid())
  saleNumber      String      @unique
  leadId          String?     @unique
  lead            Lead?
  companyName     String
  contactName     String
  email           String
  phone           String
  product         String
  quantity        Int         @default(1)
  unitPrice       Float
  grossAmount     Float       // Total sale amount in USD
  upfrontAmount   Float       // Upfront payment received in USD
  discount        Float       @default(0)
  taxPercentage   Float       @default(0)
  taxAmount       Float       @default(0)
  netAmount       Float       // Final amount after discount + tax
  currency        String      @default("USD")
  status          SaleStatus  @default(PENDING)
  closedBy        String?     // Employee ID who closed the sale
  closedAt        DateTime?
  month           Int?        // Month of sale (1-12)
  year            Int?        // Year of sale
  commission      Float?      // Commission for sales agent
  notes           String?
  accountSynced   Boolean     @default(false) // Whether financial entry created
  projectSynced   Boolean     @default(false) // Whether project created
  projectId       String?     // Reference to created project
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
}

enum LeaveType {
  SICK
  CASUAL
  EARNED
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  HOLD
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  HOLD
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum AccountType {
  INCOME
  EXPENSE
}

enum CRMLeadStatus {
  NEW
  COLD_CALL_BACK
  WARM
  PROSPECT
  SALE_MADE
  HOLD
  DORMANT
  CONVERTED
  LOST
}

enum ProjectType {
  MILESTONE
  RETAINER
}

enum ReportType {
  APR           // Attendance Performance Report
  DSR           // Daily Sales Report
  PERFORMANCE   // Employee Performance Report
  SALES         // Sales Report
  ACCOUNTS      // Account Report
}

enum SaleStatus {
  PENDING
  CONFIRMED
  DELIVERED
  PAID
  CANCELLED
}

enum PayrollStatus {
  PENDING
  APPROVED
  PAID
}