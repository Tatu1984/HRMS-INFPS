generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  role          Role      @default(EMPLOYEE)
  employeeId    String?   @unique
  employee      Employee? @relation(fields: [employeeId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Employee {
  id                String      @id @default(cuid())
  employeeId        String      @unique
  name              String
  email             String      @unique
  phone             String
  altPhone          String?
  address           String
  designation       String
  salary            Float
  department        String
  reportingHeadId   String?
  reportingHead     Employee?   @relation("ReportingStructure", fields: [reportingHeadId], references: [id])
  subordinates      Employee[]  @relation("ReportingStructure")
  dateOfJoining     DateTime
  profilePicture    String?
  documents         Json?
  user              User?
  attendance        Attendance[]
  leaves            Leave[]
  tasks             Task[]
  projects          ProjectMember[]
  messages          Message[]
  payroll           Payroll[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Attendance {
  id          String    @id @default(cuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  date        DateTime
  punchIn     DateTime?
  punchOut    DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?
  totalHours  Float?
  status      AttendanceStatus @default(ABSENT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([employeeId, date], name: "employeeId_date")
}

model Leave {
  id          String      @id @default(cuid())
  employeeId  String
  employee    Employee    @relation(fields: [employeeId], references: [id])
  leaveType   LeaveType
  startDate   DateTime
  endDate     DateTime
  days        Int
  reason      String
  status      LeaveStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Project {
  id              String    @id @default(cuid())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime?
  status          ProjectStatus @default(ACTIVE)
  milestones      Json?
  successCriteria String?
  members         ProjectMember[]
  tasks           Task[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProjectMember {
  id          String    @id @default(cuid())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  role        String?
  createdAt   DateTime  @default(now())
}

model Task {
  id          String      @id @default(cuid())
  projectId   String?
  project     Project?    @relation(fields: [projectId], references: [id])
  assignedTo  String
  employee    Employee    @relation(fields: [assignedTo], references: [id])
  title       String
  description String
  status      TaskStatus  @default(PENDING)
  priority    Priority    @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Payroll {
  id              String    @id @default(cuid())
  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id])
  month           Int
  year            Int
  baseSalary      Float
  grossSalary     Float
  deductions      Float     @default(0)
  pfDeduction     Float     @default(0)
  esiDeduction    Float     @default(0)
  taxDeduction    Float     @default(0)
  netSalary       Float
  daysPresent     Int       @default(0)
  daysAbsent      Int       @default(0)
  status          PayrollStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SalaryConfig {
  id              String    @id @default(cuid())
  pfPercentage    Float     @default(12)
  esiPercentage   Float     @default(0.75)
  taxSlabs        Json?
  bonusRules      Json?
  updatedAt       DateTime  @updatedAt
}

model Invoice {
  id              String          @id @default(cuid())
  invoiceNumber   String          @unique
  clientName      String
  clientEmail     String?
  amount          Float
  currency        String          @default("INR")
  status          InvoiceStatus   @default(DRAFT)
  items           Json?
  dueDate         DateTime?
  notes           String?
  skyDoSynced     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  id          String          @id @default(cuid())
  type        AccountType
  categoryId  String
  category    AccountCategory @relation(fields: [categoryId], references: [id])
  amount      Float
  date        DateTime
  description String?
  reference   String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model AccountCategory {
  id            String      @id @default(cuid())
  name          String      @unique
  type          AccountType
  subCategories Json?
  accounts      Account[]
  createdAt     DateTime    @default(now())
}

model Message {
  id          String      @id @default(cuid())
  senderId    String
  sender      Employee    @relation(fields: [senderId], references: [id])
  recipientId String
  subject     String?
  content     String
  read        Boolean     @default(false)
  tracked     Boolean     @default(true)
  createdAt   DateTime    @default(now())
}

model Lead {
  id            String          @id @default(cuid())
  leadNumber    String          @unique
  companyName   String
  contactName   String
  email         String
  phone         String
  source        String?         // Website, Referral, Cold Call, etc
  status        CRMLeadStatus   @default(NEW)
  assignedTo    String?
  value         Float?          // Estimated deal value
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  convertedAt   DateTime?
  saleId        String?         @unique
  sale          Sale?           @relation(fields: [saleId], references: [id])
}

model Sale {
  id              String      @id @default(cuid())
  saleNumber      String      @unique
  leadId          String?     @unique
  lead            Lead?
  companyName     String
  contactName     String
  email           String
  phone           String
  product         String
  quantity        Int         @default(1)
  unitPrice       Float
  grossAmount     Float       // Total before discounts
  discount        Float       @default(0)
  taxPercentage   Float       @default(0)
  taxAmount       Float       @default(0)
  netAmount       Float       // Final amount after discount + tax
  status          SaleStatus  @default(PENDING)
  closedBy        String?     // Employee ID who closed the sale
  closedAt        DateTime?
  notes           String?
  accountSynced   Boolean     @default(false) // Whether financial entry created
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
}

enum LeaveType {
  SICK
  CASUAL
  EARNED
  UNPAID
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  HOLD
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  HOLD
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum AccountType {
  INCOME
  EXPENSE
}

enum CRMLeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED
  LOST
}

enum SaleStatus {
  PENDING
  CONFIRMED
  DELIVERED
  PAID
  CANCELLED
}

enum PayrollStatus {
  PENDING
  APPROVED
  PAID
}